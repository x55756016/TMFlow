DELIMITER $$

DROP PROCEDURE IF EXISTS InsertWorkflowTrackingRecord $$
/*
 * Insert a single workflow tracking record.
 */	
CREATE PROCEDURE InsertWorkflowTrackingRecord
(
	IN p_WORKFLOW_INSTANCE_ID BIGINT UNSIGNED
	,IN p_WORKFLOW_INSTANCE_STATUS SMALLINT UNSIGNED
	,IN p_EVENT_DATE_TIME DATETIME
	,IN p_EVENT_ORDER INT UNSIGNED
	,IN p_EVENT_ARG_TYPE_NAME VARCHAR(128)
	,IN p_EVENT_ARG_ASSEMBLY_NAME VARCHAR(256)
	,IN p_EVENT_ARG BLOB
	,OUT p_WORKFLOW_INSTANCE_EVENT_ID BIGINT UNSIGNED
)
BEGIN
	DECLARE l_EVENT_ARG_TYPE_ID BIGINT UNSIGNED;
	
	IF p_EVENT_ARG_TYPE_NAME IS NOT NULL AND p_EVENT_ARG_ASSEMBLY_NAME IS NOT NULL THEN
		CALL GetTypeId(l_EVENT_ARG_TYPE_ID, p_EVENT_ARG_TYPE_NAME, p_EVENT_ARG_ASSEMBLY_NAME, NULL);
	END IF;
	
	-- and insert the actual record into the event table
	INSERT INTO WORKFLOW_INSTANCE_EVENT
	(
		WORKFLOW_INSTANCE_ID
		,WORKFLOW_INSTANCE_STATUS_ID
		,EVENT_ORDER
		,EVENT_DATE_TIME
		,DB_EVENT_DATE_TIME
		,EVENT_ARG_TYPE_ID
		,EVENT_ARG
	)
	VALUES
	(
		p_WORKFLOW_INSTANCE_ID
		,p_WORKFLOW_INSTANCE_STATUS
		,p_EVENT_ORDER
		,p_EVENT_DATE_TIME
		,UTC_TIMESTAMP()
		,l_EVENT_ARG_TYPE_ID
		,p_EVENT_ARG
	);
	
	SET p_WORKFLOW_INSTANCE_EVENT_ID = LAST_INSERT_ID();
END $$

DELIMITER ;
