DELIMITER $$

DROP PROCEDURE IF EXISTS InsertActivityTrackingRecord $$
/*
 * Insert a single activity tracking record.
 */	
CREATE PROCEDURE InsertActivityTrackingRecord
(
	IN p_WORKFLOW_INSTANCE_ID BIGINT UNSIGNED
	,INOUT p_ACTIVITY_INSTANCE_ID BIGINT UNSIGNED
	,IN p_QUALIFIED_NAME VARCHAR(128)
	,IN p_CONTEXT_GUID CHAR(36)
	,IN p_PARENT_CONTEXT_GUID CHAR(36)
	,IN p_ACTIVITY_STATUS_ID SMALLINT UNSIGNED
	,IN p_EVENT_DATE_TIME DATETIME
	,IN p_EVENT_ORDER INT UNSIGNED
	,OUT p_ACTIVITY_STATUS_EVENT_ID BIGINT UNSIGNED
)
BEGIN
	IF p_ACTIVITY_INSTANCE_ID IS NULL THEN
		-- grab the activity instance id
		CALL GetActivityInstanceId(p_WORKFLOW_INSTANCE_ID, 
			p_QUALIFIED_NAME, p_CONTEXT_GUID, p_PARENT_CONTEXT_GUID, 
			p_ACTIVITY_INSTANCE_ID);
	END IF;
	
	-- and insert the actual record into the event table
	INSERT INTO ACTIVITY_STATUS_EVENT
	(
		WORKFLOW_INSTANCE_ID
		,ACTIVITY_INSTANCE_ID
		,ACTIVITY_STATUS_ID
		,EVENT_ORDER
		,EVENT_DATE_TIME
		,DB_EVENT_DATE_TIME
	)
	VALUES
	(
		p_WORKFLOW_INSTANCE_ID
		,p_ACTIVITY_INSTANCE_ID
		,p_ACTIVITY_STATUS_ID
		,p_EVENT_ORDER
		,p_EVENT_DATE_TIME
		,UTC_TIMESTAMP()
	);
	
	SET p_ACTIVITY_STATUS_EVENT_ID = LAST_INSERT_ID();
END $$

DELIMITER ;
