//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.239
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMT.Workflow.Engine.BLL.RTXWCF {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RtxParams", Namespace="http://schemas.datacontract.org/2004/07/SMT.Workflow.Services.Message.RTX")]
    [System.SerializableAttribute()]
    public partial class RtxParams : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MsgTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiveUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RtxContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RtxTitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MsgType {
            get {
                return this.MsgTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MsgTypeField, value) != true)) {
                    this.MsgTypeField = value;
                    this.RaisePropertyChanged("MsgType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceiveUser {
            get {
                return this.ReceiveUserField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiveUserField, value) != true)) {
                    this.ReceiveUserField = value;
                    this.RaisePropertyChanged("ReceiveUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RtxContent {
            get {
                return this.RtxContentField;
            }
            set {
                if ((object.ReferenceEquals(this.RtxContentField, value) != true)) {
                    this.RtxContentField = value;
                    this.RaisePropertyChanged("RtxContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RtxTitle {
            get {
                return this.RtxTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.RtxTitleField, value) != true)) {
                    this.RtxTitleField = value;
                    this.RaisePropertyChanged("RtxTitle");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RTXWCF.IRTXService")]
    public interface IRTXService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTXService/RTXIMSend", ReplyAction="http://tempuri.org/IRTXService/RTXIMSendResponse")]
        void RTXIMSend(string strSender, string strSendPwd, string strReceiveUser, string strContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTXService/RTXSendMsg", ReplyAction="http://tempuri.org/IRTXService/RTXSendMsgResponse")]
        void RTXSendMsg(string strReceiveUsers, string strTitle, string strMsgContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTXService/RtxSendMsgParams", ReplyAction="http://tempuri.org/IRTXService/RtxSendMsgParamsResponse")]
        void RtxSendMsgParams(SMT.Workflow.Engine.BLL.RTXWCF.RtxParams[] Params);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTXService/AddRTXUser", ReplyAction="http://tempuri.org/IRTXService/AddRTXUserResponse")]
        bool AddRTXUser(string strDeptID, string strNick, string strName, string rtxNumber, string strMobile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTXService/UpdateRTXUser", ReplyAction="http://tempuri.org/IRTXService/UpdateRTXUserResponse")]
        bool UpdateRTXUser(string strDEPTID, string strUIN, string strNICK, string strPWD);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTXService/CheckRTXUserExist", ReplyAction="http://tempuri.org/IRTXService/CheckRTXUserExistResponse")]
        bool CheckRTXUserExist(string strUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTXService/DeleteRTXUser", ReplyAction="http://tempuri.org/IRTXService/DeleteRTXUserResponse")]
        bool DeleteRTXUser(string strUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTXService/AddRTXDept", ReplyAction="http://tempuri.org/IRTXService/AddRTXDeptResponse")]
        bool AddRTXDept(string strPDEPTID, string strDeptName, string strDeptID, string strInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRTXService/DeleteRTXDept", ReplyAction="http://tempuri.org/IRTXService/DeleteRTXDeptResponse")]
        bool DeleteRTXDept(string strDeptID, string delall);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRTXServiceChannel : SMT.Workflow.Engine.BLL.RTXWCF.IRTXService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RTXServiceClient : System.ServiceModel.ClientBase<SMT.Workflow.Engine.BLL.RTXWCF.IRTXService>, SMT.Workflow.Engine.BLL.RTXWCF.IRTXService {
        
        public RTXServiceClient() {
        }
        
        public RTXServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RTXServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RTXServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RTXServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void RTXIMSend(string strSender, string strSendPwd, string strReceiveUser, string strContent) {
            base.Channel.RTXIMSend(strSender, strSendPwd, strReceiveUser, strContent);
        }
        
        public void RTXSendMsg(string strReceiveUsers, string strTitle, string strMsgContent) {
            base.Channel.RTXSendMsg(strReceiveUsers, strTitle, strMsgContent);
        }
        
        public void RtxSendMsgParams(SMT.Workflow.Engine.BLL.RTXWCF.RtxParams[] Params) {
            base.Channel.RtxSendMsgParams(Params);
        }
        
        public bool AddRTXUser(string strDeptID, string strNick, string strName, string rtxNumber, string strMobile) {
            return base.Channel.AddRTXUser(strDeptID, strNick, strName, rtxNumber, strMobile);
        }
        
        public bool UpdateRTXUser(string strDEPTID, string strUIN, string strNICK, string strPWD) {
            return base.Channel.UpdateRTXUser(strDEPTID, strUIN, strNICK, strPWD);
        }
        
        public bool CheckRTXUserExist(string strUser) {
            return base.Channel.CheckRTXUserExist(strUser);
        }
        
        public bool DeleteRTXUser(string strUser) {
            return base.Channel.DeleteRTXUser(strUser);
        }
        
        public bool AddRTXDept(string strPDEPTID, string strDeptName, string strDeptID, string strInfo) {
            return base.Channel.AddRTXDept(strPDEPTID, strDeptName, strDeptID, strInfo);
        }
        
        public bool DeleteRTXDept(string strDeptID, string delall) {
            return base.Channel.DeleteRTXDept(strDeptID, delall);
        }
    }
}
